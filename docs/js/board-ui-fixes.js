// Board UI Fixes for Author Display

window.boardUIFixes = {
    // Apply fixes to BoardUI
    applyFixes(boardUI) {
        // Override createProjectCard to show model authors
        const originalCreateCard = boardUI.createProjectCard.bind(boardUI);
        
        boardUI.createProjectCard = function(project) {
            // First get the original card HTML
            let cardHTML = originalCreateCard(project);
            
            // If we have a model author, replace the author section
            if (project.modelAuthor) {
                // Find and replace the author meta section
                const authorRegex = /<span class="meta-item">\s*<img[^>]+>\s*[^<]+<\/span>/;
                
                const modelAuthorHTML = `
                    <span class="meta-item model-author" title="Generated by AI Model">
                        <img src="${project.user.avatar_url}" alt="${project.user.login}" class="meta-avatar">
                        ${project.modelAuthor}
                    </span>
                `;
                
                cardHTML = cardHTML.replace(authorRegex, modelAuthorHTML);
            }
            
            return cardHTML;
        };
        
        // Also override showProject for modal display
        const originalShowProject = boardUI.showProject.bind(boardUI);
        
        boardUI.showProject = function(projectNumber) {
            originalShowProject(projectNumber);
            
            // After modal is shown, update author if needed
            const project = this.projects.find(p => p.number === projectNumber);
            if (project && project.modelAuthor) {
                // Update modal author display
                const modalAuthor = document.querySelector('#projectModal .modal-author');
                if (modalAuthor) {
                    modalAuthor.innerHTML = `
                        <img src="${project.user.avatar_url}" alt="${project.user.login}" style="width: 24px; height: 24px; border-radius: 50%; margin-right: 8px;">
                        <span class="model-author" style="font-style: italic; color: var(--primary-color);">
                            ðŸ¤– ${project.modelAuthor}
                        </span>
                    `;
                }
            }
        };
    }
};

// Enhanced model author parsing with multiple patterns
window.modelAuthorParser = {
    // Parse model from issue body
    parseFromBody(body) {
        if (!body) return null;
        
        const patterns = [
            // Pattern 1: "*Model: ModelName*" at end
            /\*Model:\s*([^*\n]+)\*/i,
            // Pattern 2: "Generated by ... Model: ModelName"
            /generated by.*?Model:\s*([^\n]+)/i,
            // Pattern 3: "Model: ModelName" standalone
            /^Model:\s*([^\n]+)$/im,
            // Pattern 4: Within automation system note
            /llmXive automation system\.\s*\*?Model:\s*([^*\n]+)/i,
            // Pattern 5: "This ... was ... generated by the llmXive automation system using ModelName"
            /generated by the llmXive automation system using\s+([^\n.]+)/i
        ];
        
        for (const pattern of patterns) {
            const match = body.match(pattern);
            if (match) {
                return this.cleanModelName(match[1]);
            }
        }
        
        return null;
    },
    
    // Parse model from comments (requires async)
    async parseFromComments(issueNumber) {
        try {
            const response = await fetch(
                `https://api.github.com/repos/${CONFIG.github.owner}/${CONFIG.github.repo}/issues/${issueNumber}/comments`,
                {
                    headers: {
                        'Accept': 'application/vnd.github.v3+json'
                    }
                }
            );
            
            if (!response.ok) return null;
            
            const comments = await response.json();
            
            // Check first few comments for attribution
            for (let i = 0; i < Math.min(3, comments.length); i++) {
                const comment = comments[i];
                
                // Look for attribution comment patterns
                const patterns = [
                    /Model Attribution.*?Model ID:\s*([^\n]+)/i,
                    /Generated by.*?Model:\s*([^\n]+)/i,
                    /ðŸ¤–.*?Model:\s*([^\n]+)/i,
                    /Attribution:.*?Model:\s*([^\n]+)/i
                ];
                
                for (const pattern of patterns) {
                    const match = comment.body.match(pattern);
                    if (match) {
                        return this.cleanModelName(match[1]);
                    }
                }
            }
        } catch (error) {
            console.debug('Could not fetch comments for model parsing:', error);
        }
        
        return null;
    },
    
    // Clean and standardize model names
    cleanModelName(modelName) {
        if (!modelName) return null;
        
        // Remove common prefixes and clean up
        return modelName
            .trim()
            .replace(/\*+/g, '')
            .replace(/_+/g, ' ')
            .replace(/\s+/g, ' ')
            .replace(/^(Model:|Generated by:?|by)\s*/i, '')
            .split('/').pop() // Get model name without org
            .replace(/\.(gguf|bin|safetensors)$/i, '') // Remove file extensions
            .trim();
    },
    
    // Apply enhanced parsing to issues
    async enhanceIssuesWithModelAuthors(issues) {
        return await Promise.all(
            issues.map(async (issue) => {
                // First try to parse from body
                let modelAuthor = this.parseFromBody(issue.body);
                
                // If not found in body, try comments
                if (!modelAuthor) {
                    modelAuthor = await this.parseFromComments(issue.number);
                }
                
                return {
                    ...issue,
                    modelAuthor,
                    displayAuthor: modelAuthor || issue.user.login
                };
            })
        );
    }
};